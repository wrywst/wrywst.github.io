<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【实习】合同履约系统数据模型</title>
      <link href="/2024/09/11/sx-shuju/"/>
      <url>/2024/09/11/sx-shuju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="时间（-–8-21）"><a href="#时间（-–8-21）" class="headerlink" title="时间（ –8.21）"></a>时间（ –8.21）</h2><p>初步讨论定下来四张表（合同，验收，发运，使用，以后分别标为ABCD)，B&lt;-&gt;A(多对多），C&lt;-&gt;A(多对多)， D-&gt;A(一对多)，因为jeecg不支持多对多模型，因此需要增加映射表，为了实现多对多我的解决方法是为B，A是单表，同时新增映射表AB为B的子表，附键为Bid，同时增加字段填写Aid，这样就可以实现映射，针对这个讨论的需求前后端代码初步完成。</p><h2 id="时间（8-22–）"><a href="#时间（8-22–）" class="headerlink" title="时间（8.22–）"></a>时间（8.22–）</h2><p>和业务人员讨论后需求有变化，多加两张表（目前为合同，拟定合同，产品，验收，发运，使用，标为AXYBCD)，并且具体的业务需求也有变化。</p><blockquote><p>这个项目作为开发，还需要知道细节：一共需要哪些界面，这个界面有哪些按钮和组件，每个按钮的功能，需要增加，删除，修改，查看哪一个功能，修改增加删除的是哪一张表，或者哪两张表的哪一部分数据，确定功能的过程就可以知道表和表之间的联系。（将业务抽象出具体的表，业务之间是否或者具有什么样的联系，构建合适的数据库模型事半功倍)。因此在构建数据模型时候一定要确认用户的需求。</p></blockquote><h1 id="业务背景和主要功能"><a href="#业务背景和主要功能" class="headerlink" title="业务背景和主要功能"></a>业务背景和主要功能</h1><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><ul><li>公司向军方提供产品，并和军方签订采购合同。同时产品还需要经过监管，交装发运，检验验收。</li><li>需要将合同信息（日期，数量，金额，合同节点等）记录下来，</li><li>将合同对应产品的监管信息，交装发运表，检验验收表，部队使用信息等数据记录下来。</li><li>将合同状态进行管理（ 合同交付执行到哪一步，交付了多少）</li><li>将合同信息和产品监管信息进行归档，方便管理。</li></ul><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>合同信息增删改查，查看合同信息时需要展示对应的交装发运，检验验收，部队使用信息等数据。</li><li>交装发运表信息的增删改查，增加时需要对合进行关联。</li><li>检验验收信息的增删改查，增加时需要对交装发运进行关联。</li><li>监管信息的增删改查，增加时需要对合同进行关联。</li><li>合同履约情况表的查看，查看时需要展示合同是否延期，进行到哪一阶段。</li><li>归档表的增删改查，增加时需要关联合同或者监管信息。</li><li>用户管理和权限管理，需要的角色产品综合管理部，产品质量部，普通用户，超级管理员。</li><li>字典的管理，需要添加相应的字典，如机构单位等。</li><li>日志的管理，记录用户操作，修改记录，用户登陆信息等</li></ul><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="目前待定的数据库模型"><a href="#目前待定的数据库模型" class="headerlink" title="目前待定的数据库模型"></a>目前待定的数据库模型</h2><p>数据库的核心部分在于，<strong>技术协议</strong>和<strong>技术协议产品对应</strong>两个实体：</p><p><strong>技术协议</strong>同时连接<strong>监督信息，合同履约情况信息，和合同部分</strong>。</p><p><strong>技术协议产品对应</strong>是<strong>技术协议</strong>和<strong>产品</strong>的映射关系，因为其还要关联其他实体，所以从关系中抽离出实体。这个实体连接<strong>部队使用情况</strong>和<strong>检验验收信息</strong>。</p><p>数据库其他部分：<strong>监督信息</strong>和<strong>合同</strong>都需要归档，因此同时关联<strong>归档信息</strong>，<strong>检验验收信息</strong>连接<strong>交装发运信息</strong>。</p><blockquote><p>特别的：技术协议和产品为多对多关系，技术协议产品对应（下文称为A）映射表是联合主键，A和检验验信息收为一对多关系（根据业务，设计为多对多增加系统复杂性，并且不会简化业务人员操作，因为检验验收对应多个A是特殊情况），检验验收信息和交装发运为一对一（不设计多对多理由同上）。</p></blockquote><p><img src="https://s2.loli.net/2024/08/29/QFBk3gIlis6n1za.png" alt="screenshot-1724916810806.png"></p><h2 id="总结的设计思路"><a href="#总结的设计思路" class="headerlink" title="总结的设计思路"></a>总结的设计思路</h2><p><strong>初步设计</strong></p><p>首先根据客户需求明确实体和关系，以及实体之间是一对一，一对多，多对多的关系。然后根据需求添加属性，如合同信息实体需要添加合同编号，合同金额，合同日期，合同节点等属性。各个实体的属性要仔细考虑，避免冗余。</p><p><strong>继续优化</strong> </p><p>从复杂的关系抽出实体，例如将技术协议和产品之间多对多的关系变成实体，这样就可以让使它和部队使用信息和检验验收信息进行关联。同时，将复杂的实体分解成多个实体，例如将技术协议合同的合同节点和合同履约情况拆分出来，这样合同节点就可以和合同履约情况进行关联。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【实习】低代码平台jeecg部署开发</title>
      <link href="/2024/09/11/sx-jeecg1/"/>
      <url>/2024/09/11/sx-jeecg1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>前置知识（细化）：java编程，maven工程，linux命令，linux文件结构，vue3，nginx配置，mysql增删改查，github和svn，计算机网络</p></blockquote><p><strong>官方文档：<a href="https://ojrjjvdr7z.k.topthink.com/java/publish/war.html">https://ojrjjvdr7z.k.topthink.com/java/publish/war.html</a></strong></p><p><strong>项目地址：<a href="http://10.160.8.253/">http://10.160.8.253</a></strong></p><hr><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>服务器：nginx，jdk8，tomcat（<strong>安装9.0以上</strong>，否则和geecg中的html4.0版本不匹配），mysql，redis</p><p>开发电脑：idea，前端开发集成环境，数据库客户端，java8</p><p><strong>遇到的坑，centos中的 yum 包管理器可能不更新，安装的包版本过低导致环境出问题，尽量使用 wegt 压缩包安装环境。docker因为网络问题pull不下来。</strong></p><h1 id="开发部署工作流"><a href="#开发部署工作流" class="headerlink" title="开发部署工作流"></a>开发部署工作流</h1><blockquote><p>后端用idea开发，前端用webstorm，数据库和redis服务部署在服务器上，nginx，和tomcat也部署在服务器上，打war包部署就将项目部署在tomcat的webapp中，然后自动运行，打jar包部署就执行<code>java -jar</code>运行，两者都需要nginx配置反向代理。<br>后续需要版本控制的话，需要用到github，或者svn工具，将本地开发中将文件push上去，服务器pull下来，并完成前后端的打包工作，然后执行。</p></blockquote><p><img src="https://s2.loli.net/2024/08/02/m3E2PkcoqGrVnjZ.png" alt="开发部署流程图"></p><h1 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h1><blockquote><p>部署使用了三种方法：本地部署（开发用），docker部署，war包部署，jar包部署</p></blockquote><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><p>坑：使用docker安装环境时候pull不下来，需要注册，并且网络也有问题，换源加改bug还是不行</p><p>ps：反正不做微服务，不做云平台，docker和k8s不是刚需跳过跳过</p><h2 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h2><p>坑：首先是打包慢，一个项目打包两次，然后用tomcat部署后端war，发现报错，一直以为配置文件的问题，改了多次，才发现版本问题。然后是部署时候访问后端，doc.html页面一直提示无访问权限，又以为配置错误，开始改。官方包括网上资料也没有，最后找了b站上的视频才知道是配置中默认关闭了对文档的访问。</p><p>ps：以后项目上线，用svn管理改bug和更新太慢。</p><h2 id="jar包部署"><a href="#jar包部署" class="headerlink" title="jar包部署"></a>jar包部署</h2><p><strong>坑：官方文档教程和描述太模糊，配置文件很多选项得自己摸索。</strong></p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><blockquote><p>学习平台的使用，开发合同签订系统。</p></blockquote><h2 id="不用平台，自己开发"><a href="#不用平台，自己开发" class="headerlink" title="不用平台，自己开发"></a>不用平台，自己开发</h2><p>从零开发可以github找相似项目，再根据业务需求改动，弊端就是前端界面没法弄，前端的请求定死，只能改后端的接口。同时后端需求以及数据库的操作繁琐，开发人数多，开发周期很长。</p><h1 id="前端低代码平台"><a href="#前端低代码平台" class="headerlink" title="前端低代码平台"></a>前端低代码平台</h1><blockquote><p>aims,vtj,aims主要用json配置文件生成页面，vtj用拖拽的方式生成</p></blockquote><p>aims的使用也需要具备前端知识，例如路由，接口，部署的知识，只是可能对于xml，js的掌握能力要求不高，可以使用json配置文件写出vue前端页面。因此pass掉。</p><h1 id="jeecgboot的深入学习后"><a href="#jeecgboot的深入学习后" class="headerlink" title="jeecgboot的深入学习后"></a>jeecgboot的深入学习后</h1><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>想要二次开发这个系统满足基本业务，需要具备和传统的开发一样三大块的知识，数据库mysql，前端vue，后端springboot。geecg可以理解为一个普通的企业管理系统，只不过多加了在线低代码甚至零代码的模块。这个模块帮助我们构建简单的数据库模型，简单的前端界面，以及简单的增删改查功能。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ol><li><p>学习过程中发现几个不适合二次开发的点,前端自己封装了一些框架和组件，并不是使用传统的一些框架。前端代码不容易理解。</p></li><li><p>在研究online功能时以为这部分需要调用外部api，但是跟踪后发现还是请求的本地，一直找不到后端和前端入口，然后再查资料发现这部分低代码部分并不开源，而是打成jar包供使用。</p></li><li><p>其中代码生成器功能可以生成前后端，数据库代码，但是数据模型仅限于主子表（一对一，一对多），单表，树表。对于更加复杂的模型无法生成。</p></li></ol><h2 id="新的平台：若依低代码平台"><a href="#新的平台：若依低代码平台" class="headerlink" title="新的平台：若依低代码平台"></a>新的平台：若依低代码平台</h2><p>鉴于以上原因，我找到一个新的低代码平台–若依，这个平台代码相较于jeecg更简单更易读。大部分功能和jeecg一样，都提供部门和角色管理，系统监控，字典等功能，但是不同的是<strong>其中的低代码功能是生成预览代码，手动保存在本地（并不支持在线编辑和自动保存），其功能更像是在idea中加入依赖插件一样（例如mybatis-generate）</strong>。另外若依的前端没有经过封装，使用的是主流的element-ui组件，前端代码也会更加易读和开发。</p><blockquote><p>正在部署试验阶段（已完成本地开发环境部署），同时geecg的工作也会继续进行，尝试把合同履约系统实现。</p></blockquote><h1 id="若依平台后续"><a href="#若依平台后续" class="headerlink" title="若依平台后续"></a>若依平台后续</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>经过阅读前端代码，发现其结构清晰（路由关系，调用关系，），没有封装，易于二次开发，并且平台内置前端代码拖拽式生成，可以节省前端极大工作量。</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><p>代码生成功能不会生成<code>swagger</code>接口信息</p></li><li><p>*登陆验证和权限管理通过<code>springboot-security + JWT</code>实现，</p></li></ul><hr><p>实习工作结束</p>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【实习】低代码平台调研</title>
      <link href="/2024/09/11/sx-diaoyan/"/>
      <url>/2024/09/11/sx-diaoyan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是低代码平台"><a href="#什么是低代码平台" class="headerlink" title="什么是低代码平台"></a>什么是低代码平台</h1><p><img src="https://s2.loli.net/2024/09/11/szINDvphLTq2ZxX.png" alt="WXWorkLocalPro_17260225958146.png"></p><ol><li>低代码平台是指通过可视化界面，组件化和模板等方式让开发者可以快速搭建应用，不需要编写代码，降低了编程的门槛。</li><li>使非开发人员甚至业务人员这也能参与软件开发，提高了生产力。</li></ol><h1 id="基于软件的低代码平台"><a href="#基于软件的低代码平台" class="headerlink" title="基于软件的低代码平台"></a>基于软件的低代码平台</h1><p>基于软件的低代码平台是指将低代码平台作为软件的一部分，通过软件的形式提供给开发者，开发者可以直接在平台上进行业务功能的开发。</p><h2 id="开源平台选择jeecg"><a href="#开源平台选择jeecg" class="headerlink" title="开源平台选择jeecg"></a>开源平台选择jeecg</h2><p> 因为考虑到到要二次开发，所以只在开源平台选择，另外需要着重考虑的因素有社区活跃度，功能丰富度，技术架构，拓展性，文档完善度等。</p><p><img src="https://s2.loli.net/2024/09/11/cqruQIFzbVegZsX.png" alt="WXWorkLocalPro_17260227923282.png"></p><blockquote><p>最终在经过了解和学习一些排名靠前的开源平台后（上图是对各个平台的评价），排除了不适合的，最终选择了<strong>jeecg平台</strong>。</p></blockquote><h2 id="社区活跃度高，文档详细"><a href="#社区活跃度高，文档详细" class="headerlink" title="社区活跃度高，文档详细"></a>社区活跃度高，文档详细</h2><ul><li>B站关注18k，并且有基础功能的教学</li><li>Github上star数38k+，并且持续更新</li><li>开发文档详细，包括部署，代码生成，权限，字典等等的说明</li></ul><h2 id="技术栈主流"><a href="#技术栈主流" class="headerlink" title="技术栈主流"></a>技术栈主流</h2><p>前端：</p><ul><li>采用 Vue3.0+TypeScript+Vite+Ant-Design-Vue等新技术方案，包括二次封装组件、utils、hooks、动态菜单、权限校验、按钮级别权限控制等功能</li><li>依赖管理：node、npm、pnpm</li></ul><p>后端：</p><ul><li>语言：Java 8+ (支持17)</li><li>依赖管理：Maven</li><li>基础框架：Spring Boot 2.7.18</li><li>微服务框架： Spring Cloud Alibaba 2021.0.1.0</li><li>持久层框架：MybatisPlus 3.5.3.2</li><li>报表工具： JimuReport 1.7.6</li><li>安全框架：Apache Shiro 1.12.0，Jwt 3.11.0</li><li>微服务技术栈：Spring Cloud Alibaba、Nacos、Gateway、Sentinel、Skywalking</li><li>数据库连接池：阿里巴巴Druid 1.1.22</li><li>日志打印：logback</li><li>缓存：Redis</li></ul><h2 id="平台架构简单"><a href="#平台架构简单" class="headerlink" title="平台架构简单"></a>平台架构简单</h2><blockquote><p>平台架构简单，二次开发难度不高</p></blockquote><p><img src="https://s2.loli.net/2024/09/11/bC4tnKNaWRgxpHv.png" alt="2.png"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>其中jeecg平台的核心功能就是代码生成，开发者可以根据业务需求生成代码</p><ul><li>后端代码：包括实体类、Dao层、Service层、 Controller层</li><li>前端代码，包括页面、组件、路由、接口等</li><li>数据库脚本：包括表结构、数据初始化脚本、权限分配脚本等</li></ul><p><img src="https://s2.loli.net/2024/09/11/W5hzcbnsVS3yuRw.png" alt="1.png"></p><h2 id="jeecg学习总结"><a href="#jeecg学习总结" class="headerlink" title="jeecg学习总结"></a>jeecg学习总结</h2><ul><li>对于业务人员:对于不懂java开发，不懂数据库，不懂前端vue3开发的人员，在经过简单学习后也可以通过自动代码生成器完成对数据库的增删改查，实现简单的业务功能和报表功能。</li><li>对于管理人员:不用开发人员开发用户，权限，和统计的功能，平台自动集成。</li><li>对于开发人员:仅通过修改部分代码完成复杂业务，减去重复性质工作。并且平台中集成功能仅通过配置就可以使用，不用写底层代码例如租户，多数据源，导入导出等。</li><li>对于运维人员:可以查看分析系统各部分运行情况，方便维护系统。</li></ul><h1 id="基于云的低代码平台（云原生架构）"><a href="#基于云的低代码平台（云原生架构）" class="headerlink" title="基于云的低代码平台（云原生架构）"></a>基于云的低代码平台（云原生架构）</h1><p>基于云的低代码平台是指将云计算平台作为低代码平台的基础设施，通过云平台提供的能力，开发者可以快速搭建应用，实现业务功能。</p><h2 id="什么是云"><a href="#什么是云" class="headerlink" title="什么是云"></a>什么是云</h2><p>云是指通过互联网提供的计算资源和服务，包括但不限于存储、计算能力、数据库、网络和软件等。云服务提供商（如AWS、Azure、Google Cloud等）允许用户按需使用这些资源，而无需购买和维护物理硬件。云服务通常分为三种主要类型：</p><ol><li><strong>基础设施即服务（IaaS）</strong>：提供基本的计算资源，如虚拟机、存储和网络。用户可以完全控制操作系统、应用程序和网络配置。</li><li><strong>平台即服务（PaaS）</strong>：提供了一个平台，允许开发者在其上构建、部署和管理应用程序，而无需担心底层基础设施的管理。</li><li><strong>软件即服务（SaaS）</strong>：通过互联网提供软件应用，用户无需安装和维护软件，只需通过浏览器或应用程序接口访问即可。</li></ol><p><img src="https://s2.loli.net/2024/09/11/bNEAkIcvXyW8iSn.png" alt="WXWorkLocalPro_17260229746828.png"></p><h2 id="Rainbond平台学习"><a href="#Rainbond平台学习" class="headerlink" title="Rainbond平台学习"></a>Rainbond平台学习</h2><p>Rainbond平台是基于云原生架构的企业级容器管理平台，支持多种编程语言、微服务架构、DevOps、微服务治理、微服务监控等功能。<br>架构如图所示：</p><p><img src="https://s2.loli.net/2024/09/11/q3x82YMjGb7AO6i.png" alt="WXWorkLocalPro_1726023057492.png"></p><blockquote><p>Rainbond应用开发阶段也会用到低代码技术，低代码相当于开发阶段得一部分</p></blockquote><p>rainbond涵盖了应用全周期的管理：</p><ul><li>开发：开箱即用的环境，自动编译打包，应用市场安装开发工具。</li><li>交付：持续交付，将应用模板展示在应用市场，可远程连接，自动升级。</li><li>运维：自动运维，全可视化。</li></ul><hr><p>结束结束，调研时长两周</p>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】使用Kimi进行模拟面试记录-2</title>
      <link href="/2024/09/02/jqms-2/"/>
      <url>/2024/09/02/jqms-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring框架中有哪些核心概念？请举例说明您如何使用它们"><a href="#Spring框架中有哪些核心概念？请举例说明您如何使用它们" class="headerlink" title="Spring框架中有哪些核心概念？请举例说明您如何使用它们"></a>Spring框架中有哪些核心概念？请举例说明您如何使用它们</h1><h2 id="我的回答"><a href="#我的回答" class="headerlink" title="我的回答"></a>我的回答</h2><p>spring框架的核心是自动依赖注入机制，在spring的启动类的注解<code>springbootapplication</code>实际上包含了<code>autoconfiguration</code>注解，可以自动导入并配置好pom文件里的依赖，同时spring核心也有类管理机制，通过<code>bean</code>注解将类交给spring管理，可以自动管理对象的创建销毁，使用时候<code>autowired</code>自动注入。在实际项目中，例如我使用了<code>my-batisplus</code>数据库操作的依赖，我只需要pom文件导入，并且在配置文件修改参数，就可以使用这个服务，不需要关心底层的实现，节省时间。</p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>您的回答很好地概括了Spring框架的核心概念，特别是自动依赖注入机制和类管理机制。您还提供了一个实际项目中使用Spring框架的例子，这显示了您对Spring框架的理解和应用能力。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您正确地识别了Spring框架的核心概念，如自动依赖注入和类管理机制，并提供了一个实际使用MyBatis-Plus的例子，说明了Spring框架如何简化配置和使用第三方库。</li><li><strong>改进点</strong>：可以进一步讨论Spring框架的其他核心概念，如AOP（面向切面编程）、事务管理、MVC模式等，以及它们在实际项目中的应用。</li></ul><blockquote><p>spring的核心有aop面向切片编程，可以将一些共同的操作（例如日志管理，事务处理，权限控制等）抽象成切片，在不同的地方使用，提高代码的复用性。</p></blockquote><blockquote><p>事务管理可以确保数据一致性，完整性，并发性。</p></blockquote><blockquote><p>mvc模式可以将业务逻辑和页面展示分离，提高代码的可维护性。</p></blockquote><blockquote><p>ioc控制反转可以将对象创建和管理交给spring，使用<code>bean</code>和<code>component</code>注解，可以自动管理对象生命周期，使用<code>autowired</code>关键字可以自动注入依赖。</p></blockquote><h1 id="在银行系统中，数据一致性和完整性至关重要。请谈谈您如何保证数据库操作的原子性、一致性、隔离性和持久性（ACID）"><a href="#在银行系统中，数据一致性和完整性至关重要。请谈谈您如何保证数据库操作的原子性、一致性、隔离性和持久性（ACID）" class="headerlink" title="在银行系统中，数据一致性和完整性至关重要。请谈谈您如何保证数据库操作的原子性、一致性、隔离性和持久性（ACID）"></a>在银行系统中，数据一致性和完整性至关重要。请谈谈您如何保证数据库操作的原子性、一致性、隔离性和持久性（ACID）</h1><h2 id="我的回答-1"><a href="#我的回答-1" class="headerlink" title="我的回答"></a>我的回答</h2><p>首先，在设计数据库的时候要遵循数据库范式，要将数据库拆分，减少数据重复。其次是在操数据库执行具有事务的概念，事务执行的时候，要使用合适的加锁策略，保证数据库的原子性和一致性。避免出现幻读，脏读，重复读等bug。</p><h2 id="评价-1"><a href="#评价-1" class="headerlink" title="评价"></a>评价</h2><p>您的回答涵盖了数据库设计和事务管理的一些关键点，这对于确保银行系统中数据的一致性和完整性是非常重要的。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您提到了数据库范式和事务管理，这些都是确保ACID属性的关键技术。您还提到了加锁策略，这是防止并发访问导致数据不一致的有效方法。</li><li><strong>改进点</strong>：可以进一步详细说明不同类型的锁（如乐观锁和悲观锁）以及它们在实际场景中的应用。此外，可以讨论一些具体的数据库隔离级别，如读已提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable），以及它们如何影响数据库操作的原子性、一致性、隔离性和持久性。</li></ul><blockquote><p>原子性： 使用事务来确保一组数据库操作要么全部成功，要么全部失败。 事务的提交（COMMIT）和回滚（ROLLBACK）机制确保了操作的原子性。</p></blockquote><blockquote><p>一致性： 在设计数据库时遵循数据库范式，确保数据结构合理，减少数据冗余和不一致。 使用约束（如主键、外键、唯一约束、检查约束等）来保证数据的一致性。</p></blockquote><blockquote><p>隔离性： 使用适当的隔离级别（如读未提交、读已提交、可重复读、串行化）来控制事务之间的可见性。 使用锁机制（如行级锁、表级锁）来避免并发操作引起的数据不一致问题（如幻读、脏读、重复读）。</p></blockquote><blockquote><p>持久性： 确保事务提交后，数据持久化到磁盘，即使系统崩溃也能恢复。 使用日志机制（如事务日志、重做日志）来记录事务操作，以便在系统恢复时进行数据恢复</p></blockquote><h1 id="请描述一种您在后端开发中使用过的软件设计模式，并解释为什么选择它。"><a href="#请描述一种您在后端开发中使用过的软件设计模式，并解释为什么选择它。" class="headerlink" title="请描述一种您在后端开发中使用过的软件设计模式，并解释为什么选择它。"></a>请描述一种您在后端开发中使用过的软件设计模式，并解释为什么选择它。</h1><h2 id="我的回答-2"><a href="#我的回答-2" class="headerlink" title="我的回答"></a>我的回答</h2><p>我常用的软件设计模式是MVC，它分为model，view，controller三部分，view层是展示层，通过view的请求通过controller层调用相应的model来处理，处理结果再返回给view。这种设计模式，将数据，调用，处理逻辑之间区分开，降低了系统的耦合性。</p><h2 id="评价-2"><a href="#评价-2" class="headerlink" title="评价"></a>评价</h2><p>您对MVC（Model-View-Controller）设计模式的描述是正确的，这是一种非常常见的设计模式，特别是在Web应用程序开发中。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您正确地解释了MVC模式的三个主要组成部分及其作用，并且指出了这种模式如何降低系统耦合性。</li><li><strong>改进点</strong>：可以进一步讨论MVC模式在实际项目中的应用，例如如何具体实现控制器和模型的交互，或者在面对特定问题时如何调整MVC模式以适应需求。</li></ul><blockquote><p>例如在在springmvc中，我们使用controller来处理请求，并将请求参数传递给service层，service层处理请求，调用mapper层中进行数据库的增删改查，并将结果返回给controller，controller再将结果返回给view。</p></blockquote><h1 id="银行系统通常需要高可用性和可扩展性。请谈谈您如何设计一个高可用的后端系统。"><a href="#银行系统通常需要高可用性和可扩展性。请谈谈您如何设计一个高可用的后端系统。" class="headerlink" title="银行系统通常需要高可用性和可扩展性。请谈谈您如何设计一个高可用的后端系统。"></a>银行系统通常需要高可用性和可扩展性。请谈谈您如何设计一个高可用的后端系统。</h1><h2 id="我的回答-3"><a href="#我的回答-3" class="headerlink" title="我的回答"></a>我的回答</h2><p>可用是大型系统必须要考虑的问题，我们通常可以使用分布式系统来实现高可用。最常用的分布式的框架<code>spring-cloud</code>，根据这个思想，我们需要将不同的服务拆开，例如银行可以拆为支付，用户，保险，理财等等模块，模块之间使用消息队列进行通信，这样就具有很好的拓展性。同时我们可以让一个服务分布在很多节点上，并都注册在<code>nacos</code>上，这样某个服务的节点故障或者堵塞时，依然不影响系统运行，同时可以使用<code>sential</code>熔断机制，当一个节点发生堵塞故障时候，自动中断服务。从而保证系统高可用。</p><h2 id="评价-3"><a href="#评价-3" class="headerlink" title="评价"></a>评价</h2><p>您提供了一个关于如何设计高可用后端系统的详细答案，并且提到了分布式系统、微服务架构、消息队列、服务注册与发现以及熔断机制等关键技术。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您正确地指出了分布式系统和微服务架构在实现高可用性方面的重要性，并提到了Spring Cloud、消息队列、Nacos服务注册与发现以及Sentinel熔断机制等现代云原生技术。</li><li><strong>改进点</strong>：可以进一步讨论负载均衡、冗余设计、故障转移策略、数据备份和恢复等其他高可用性策略。</li></ul><blockquote><p>当采用分布式系统时候，要用负载均衡策略将请求分发到各个节点上。同时数据库也可以分布到多个实例，通过主从复制实现读写分离。使用消息队列实现异步处理，提高性能。使用redis缓存，减少数据库访问次数。在gateway网关设置过滤器和流量削峰机制进行进行流量控制。</p></blockquote><h1 id="银行系统对安全性有很高的要求。请谈谈您在开发过程中如何考虑和实现安全性。"><a href="#银行系统对安全性有很高的要求。请谈谈您在开发过程中如何考虑和实现安全性。" class="headerlink" title="银行系统对安全性有很高的要求。请谈谈您在开发过程中如何考虑和实现安全性。"></a>银行系统对安全性有很高的要求。请谈谈您在开发过程中如何考虑和实现安全性。</h1><h2 id="我的回答-4"><a href="#我的回答-4" class="headerlink" title="我的回答"></a>我的回答</h2><p>首先，系统的安全性需要用户的账号和登陆安全，我们可以将用户账户密码等敏感数据进行传输都时候加密处理，同时登陆认证可以采用多种认证操作。另外在系统的转账模块或者支付模块，限制每日转账消费金额，超额需要线下办理等。代码模块要保留用户日志，包括登陆ip，地点，转账次数金额等进行安全分析，出现异常时冻结或者提示。另外在企业内部，需要做严格的权限管理，数据和系统的操作权限开通都需要审核，确保数据不会泄露，与业务无关人员不可见。</p><h2 id="评价-4"><a href="#评价-4" class="headerlink" title="评价"></a>评价</h2><p>您的回答涵盖了多个关键的安全措施，包括用户认证、数据加密、操作限制、日志记录和权限管理，这些都是确保银行系统安全性的重要方面。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您提到了多种安全措施，包括加密、多因素认证、操作限制、日志记录和权限管理，这些都是确保银行系统安全的有效手段。</li><li><strong>改进点</strong>：可以进一步讨论一些具体的安全技术和标准，如使用HTTPS进行数据传输加密、采用OAuth或JWT进行认证、使用数据库加密技术保护存储数据、实施定期的安全审计和漏洞扫描等。</li></ul><blockquote><p>登陆使用jwt进行认证，使用https加密传输数据，使用数据库加密技术保护存储数据，定期进行安全审计和漏洞扫描。</p></blockquote><h1 id="在团队项目中，您如何处理意见不合或冲突？"><a href="#在团队项目中，您如何处理意见不合或冲突？" class="headerlink" title="在团队项目中，您如何处理意见不合或冲突？"></a>在团队项目中，您如何处理意见不合或冲突？</h1><h2 id="我的回答-5"><a href="#我的回答-5" class="headerlink" title="我的回答"></a>我的回答</h2><p>在一个项目中，出现不同的意见恰恰说明这是技术上的难点，或是系统的瓶颈。首先我会听取每个人的意见进行评估，筛选出可取的意见。用这些意见首先询问项目相关业务人员，确认是否满足业务需要，然后再问需求人员是否能够实现，然后问开发人员开发的难度和周期。经过以上条件的评估，我会开会进行比较讨论，选定一个方向，排除不合意见，确保团队一条心，这样项目效率和质量才会高。</p><h2 id="评价-5"><a href="#评价-5" class="headerlink" title="评价"></a>评价</h2><p>您的回答展示了您在处理团队冲突和意见不合时的成熟和系统的方法。您强调了沟通、评估和协调的重要性，这是团队合作中非常宝贵的技能。</p><p><strong>回答评估</strong>：</p><ul><li><strong>优点</strong>：您展现了在面对团队冲突时的积极态度和解决问题的策略，包括听取各方意见、与相关人员沟通确认、评估可行性和组织讨论以达成共识。</li><li><strong>改进点</strong>：可以进一步讨论如何建立一个开放的沟通环境，鼓励团队成员提出意见，并在决策过程中考虑团队成员的情感和心理因素，以及如何使用项目管理工具来跟踪决策的执行和效果。</li></ul><h1 id="面试复盘"><a href="#面试复盘" class="headerlink" title="面试复盘"></a>面试复盘</h1><p>至此，我们已经完成了8个模拟面试问题。接下来，我将为您提供一个全面的面试复盘，分析您在面试中的表现，并给出具体的建议。</p><ol><li><strong>Java基础和集合框架</strong>：您对Java集合框架的理解是准确的，但在描述线程同步机制时，可以更具体地提及Java中的同步关键字和并发工具类。</li><li><strong>多线程和并发</strong>：您提到了时间片的概念，但在Java中，线程同步更常涉及<code>synchronized</code>、<code>ReentrantLock</code>等机制。您对死锁的处理方法描述得很好。</li><li><strong>Spring框架</strong>：您对Spring的核心概念理解正确，并能够将理论知识与实际项目经验相结合。</li><li><strong>数据库ACID属性</strong>：您提到了数据库范式和事务管理，这是确保ACID属性的关键。可以进一步讨论数据库隔离级别和锁机制。</li><li><strong>设计模式</strong>：您选择了MVC模式并解释了其在项目中的应用，这是一个很好的选择，因为它直接关联到Web开发的实际应用。</li><li><strong>系统架构</strong>：您对高可用性的设计有很好的理解，包括使用分布式系统、微服务架构和相关技术。</li><li><strong>安全性</strong>：您提出了一系列有效的安全措施，包括用户认证、数据加密和权限管理，这些都是银行系统安全性的重要组成部分。</li><li><strong>团队合作</strong>：您展示了在处理团队冲突时的沟通和协调能力，这对于团队合作和项目成功至关重要。</li></ol><p><strong>改进建议</strong>：</p><ul><li>在描述技术概念和机制时，尽量使用更具体的术语和实例。</li><li>在讨论解决方案时，可以更详细地说明您的思考过程和所采取的具体措施。</li><li>准备一些关于公司和职位的问题，以展示您的兴趣和主动性。</li></ul><hr><p>结束</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的开始和重启</title>
      <link href="/2024/08/30/blog/"/>
      <url>/2024/08/30/blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><blockquote><p>以下都是回忆，时间太久可能有不准确的地方。感觉当时是什么也不懂，不懂前端不懂后端，在学校学大底都是基础的知识。数据结构，计算机网络，计算机组成原理，操作系统，还有各种语言：c，c++，java，python。因此对于这些更高层次（基础知识是基础，上面的框架就是高楼）的东西就不懂，所以所有东西都很新鲜，我甚至是第一次知道nginx，node.js。</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>只要是计算机专业的学生肯定都听说过博客是学计算机用来记录技术的一种方式，但是很少有人（起码我身边没有）愿意花时间来记录。但是同时我又觉得博客是一个很酷的东西，起码在学生阶段，就代表你技术比别人强。</p><p>本科阶段大二就开始萌生创建博客的想法了，但因为考研的事情耽误了，因此考完研的寒假回到家我就开始准备做博客。</p><p>那时候阿里云的服务器学生有一个月免费使用机会，同时开始在网上看教程，博客分为静态框架和动态框架，静态框架部署比较简单只用把前端用nginx代理就行了，所以我选择了这个。在自己电脑电脑上装了node.js环境，用npm装了hexo框架，然后又找了一个主题<code>butterfly</code>。</p><p>完事开头难，当时没有配置文件的概念，我就在想为什么整个项目只用改了一个文件，我是那种有问题不解决就难受的性格，这个问题一直困扰我好久，就开始看各种零零散散的资料，同时一个更大的世界展示在我面前。</p><blockquote><p>现在想想也只有年纪小的时候才有那种面对未知的兴奋，以及学习成长的成就感。初三的时候我在语文课上看安娜卡列尼娜，托尔斯泰在里面描写的俄罗斯贵族社会，以及革命的火种吸引着我。列宁躺在村里的草垛上，看着深邃的星空，远离贵族的歌舞，憧憬革命的理想的自由与坚定吸引着我。</p></blockquote><p>然后就是漫长的读文档，修改配置文件。一个图标，一个链接，一个路由，一个图片慢慢的填充修改自己的东西，当时那个音乐器的功能我特别想要，但是怎么改配置都弄不出来，这个问题困扰我好久。</p><h2 id="我的第一个博客文章"><a href="#我的第一个博客文章" class="headerlink" title="我的第一个博客文章"></a>我的第一个博客文章</h2><p>当时刚考完研，本科室友说应该写个上岸贴子，说不定就有人找你辅导。我于是也跟着写了，写完之后传到自己的博客里。这也是我的一个文章。</p><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>写了一个博客我就迫不及待的准备部署了（没想到这也是以后三年我唯一的一篇博客），刚开始就是直接把文件传到服务器上，然后用nginx代理，一切看教程（当时对nginx也没什么概念）。后来又想阿里云到期了咋办，于是又按照网上的方法将博客用git托管起来（当时很兴奋啊，不需要花钱就可以拥有“域名”）。把网站发给朋友们炫耀一番，兴奋劲头过了就抛到脑后了。</p><h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><ul><li><strong>图床：SM.MS</strong>：第一次有了图床的概念，上传很慢，但是免费</li><li><strong>图标：阿里的图标库</strong>：第一次有图标库概念</li><li><strong>评论功能：LeanCloud</strong>：因为这个主题里面集成了这个，后面知道了这是一个数据管理的工具。</li><li><strong>nginx：代理功能</strong>：在这个项目中代理前端</li><li><strong>git：托管服务</strong>：当时一直疑问为什么仓库中的文件只是本地的一部分，就可以有完整的前端界面。后来知道hexo自带的一键部署本质是一个自动化脚本，只将生成的前端文件<code>public</code>托管，每次博客有修改的话重新生成新的<code>public</code>文件，并将这个文件推送到远程仓库。</li></ul><h1 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h1><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>博客这个事情一直就搁置了，但是偶尔会登上看一下。真正让我觉得有必要做博客的的契机是，实习期间需要将学习的内容定期开会汇报，为了将工作和学习的成果记录下来，我就又捡起程序员老本行用markdown文件来记录，随着工作的深入，我对于这个行业的理解和目前自己手头任务的理解也深入了，我记录的东西越来越多了。</p><p>直到某天下班后，我在想写都写了为什么不能将这文件传到博客，以后还能翻出来看看，然后又想我平时学习的内容我都是用word记录的，传到博客上岂不是更好，平时的经历也可以记录下来。就这样越想越多。。。。。</p><h2 id="学生不应该写博客"><a href="#学生不应该写博客" class="headerlink" title="学生不应该写博客"></a>学生不应该写博客</h2><p>感觉博客是基于工作驱动，因为工作的成果需要量化，所以我们在工作中就要总结，博客只是一个汇总的地方。所以耗费的时间和精力并不大，终于理解到了这一层了。也解决了我多年的疑问：</p><p><strong>为什么学生很少用博客</strong>：因为学生的没人管，学习通过考试量化，学生还要应付考试，和工作量化的方式有区别的，单独写博客耗费的时间和精力太大了，有时间为什么不放松以下呢。</p><p><strong>结论</strong>：学生都去玩，不用写博客。</p><p><strong>坦克大战</strong>：但是又想一想，当时做的一些工作都泯灭了，也是一种遗憾把。当时用c++写了一个坦克大战的代码（兴趣来了，连着几天熬夜到三点写代码），加载界面点击启动会出来外星人电脑的图标（因为当时觉得外星人就是世界上最好的电脑），然后进入“桌面”（其实就是一个桌面图片贴图。回车再进入游戏，游戏界面会播放舒克和贝塔的音乐，这么一看界面做的确实不错。但是代码算法和逻辑bug一大堆，坦克的子弹越来越快，打中之后子弹穿过去，如果记录下来还是很有意思。现在源码找不见了，打包好的文件也找不到了。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><blockquote><p>以后准备在博客上写的东西规划一下</p></blockquote><p>1.工作中的成果<br>2.技术上的总结<br>3.学习上的总结<br>4.生活中的关键事情</p><hr><p>下班下班！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】使用Kimi进行模拟面试记录-1</title>
      <link href="/2024/08/30/jqms-1/"/>
      <url>/2024/08/30/jqms-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="为什么选择机器面试"><a href="#为什么选择机器面试" class="headerlink" title="为什么选择机器面试"></a>为什么选择机器面试</h1><p>今天在逛知乎的时候首页看到了kimi的广告，点进去之后就玩了玩。产品的定位是<strong>帮助办公提升效率</strong>，本质上还是基于大模型的对话机器人。目前这类产品好像很多0.0，竞争好激烈（大模型无论是在科研还是市场的冲击力都是毋庸置疑的）。正好最近在学习java面试的内容，我选择了“offer收割机”的机器人。</p><h1 id="Q：帮我分析这份简历还有什么不足（我传了自己的pdf上去）"><a href="#Q：帮我分析这份简历还有什么不足（我传了自己的pdf上去）" class="headerlink" title="Q：帮我分析这份简历还有什么不足（我传了自己的pdf上去）"></a>Q：帮我分析这份简历还有什么不足（我传了自己的pdf上去）</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>​<strong>姓名</strong>​：王若愚</li><li>​<strong>年龄</strong>​：24岁</li><li>​<strong>身高</strong>​：176cm</li><li>​<strong>专业</strong>​：电子信息（人工智能方向）</li><li>​<strong>联系方式</strong>​：提供了手机号码和邮箱，这是必要的。</li></ul><p>​<strong>建议</strong>​：可以添加LinkedIn或GitHub等专业社交平台的链接，以展示您的专业网络和代码库。</p><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><ul><li>​<strong>硕士</strong>​：电子信息专业，专业排名前5%，显示了您的学术优秀。</li><li>​<strong>本科</strong>​：数据科学与大数据技术，同样来自双一流大学，有扎实的计算机科学基础。</li></ul><p>​<strong>建议</strong>​：可以突出您在学术上的成就，例如论文发表、项目参与等。</p><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><ul><li>​<strong>北京润科通用技术有限公司</strong>​：技术栈广泛，涉及多个方面，显示了您的技术多样性和学习能力。</li><li>​<strong>中科品智科技有限公司</strong>​：参与了土地数据构建项目，使用了先进的技术栈。</li></ul><p>​<strong>建议</strong>​：具体化您的职责和成就，使用量化的成果来展示您的影响力，例如“提高了系统性能X%”。</p><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ul><li>​<strong>实验室服务器智能管理系统</strong>​：技术栈丰富，项目描述清晰。</li><li>​<strong>高分遥感图像目标识别</strong>​：显示了您在深度学习领域的研究能力。</li></ul><p>​<strong>建议</strong>​：使用“STAR”方法（Situation, Task, Action, Result）来描述项目经历，使招聘者更清楚地了解您的角色和贡献。</p><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><ul><li>强调了学习能力、团队合作精神和沟通能力。</li></ul><p>​<strong>建议</strong>​：提供具体的例子或情景来支持您的自我评价，使其更具说服力。</p><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul><li>列出了一系列的技术栈和开发工具，显示了您的技术广度。</li></ul><p>​<strong>建议</strong>​：可以进一步细分技能，例如将“数据库”技能细分为“熟悉MySQL的优化和Redis的缓存机制”。</p><h2 id="其他经历"><a href="#其他经历" class="headerlink" title="其他经历"></a>其他经历</h2><ul><li>获得了多个奖项，参与了社会实践活动，这些都是加分项。</li></ul><p>​<strong>建议</strong>​：突出这些经历中与软件开发相关的部分，以及它们如何为您的软件开发职业生涯增添价值。</p><h2 id="总体评价"><a href="#总体评价" class="headerlink" title="总体评价"></a>总体评价</h2><p>简历整体内容丰富，展示了您的教育背景、技术能力和项目经验。但是，可以通过以下方式进一步优化：</p><ul><li>​<strong>量化成果</strong>​：在描述经历时，使用具体的数字和成果来量化您的贡献。</li><li>​<strong>突出重点</strong>​：根据目标岗位的要求，突出最相关的技能和经验。</li><li>​<strong>清晰布局</strong>​：确保简历的布局清晰，便于招聘者快速抓住重点。</li><li>​<strong>个性化</strong>​：添加个人博客链接，展示您的个人品牌和专业兴趣。</li></ul><p>根据您提供的简历内容，我给出的简历分数是85/100。这个分数反映了简历的内容丰富度和专业性，但仍有改进空间，特别是在量化成就和突出重点方面。如果您需要进一步的帮助，例如模拟面试或定制化自我介绍模板，请随时告诉我。</p><blockquote><p>我竟然觉得分析的还可以，比如个人信息我准备添加自己博客的地址，实习经历我可以量化自己的成果，可以展示自己影响力信服力大。专业技能可以更加细分，尽量将自己的优势展现出来。奖项突出与软件开发相关。</p></blockquote><h1 id="Q：帮我安排一场目标职位是银行的java后端面试"><a href="#Q：帮我安排一场目标职位是银行的java后端面试" class="headerlink" title="Q：帮我安排一场目标职位是银行的java后端面试"></a>Q：帮我安排一场目标职位是银行的java后端面试</h1><p>既然您目标的职位是银行的Java后端开发岗位，我将根据这个岗位的特点准备一系列模拟面试问题。请注意，我们将逐步进行，每次只提出一个问题，然后继续到下一个问题。</p><h2 id="模拟面试问题列表（共8个问题，包括1个反问环节）："><a href="#模拟面试问题列表（共8个问题，包括1个反问环节）：" class="headerlink" title="模拟面试问题列表（共8个问题，包括1个反问环节）："></a>模拟面试问题列表（共8个问题，包括1个反问环节）：</h2><ol><li>​<strong>Java基础问题</strong>​：请谈谈Java中的集合框架，以及您在项目中如何使用它们。</li><li>​<strong>多线程和并发问题</strong>​：描述一下Java中的线程同步机制，以及您是如何处理并发问题的。</li><li>​<strong>Spring框架问题</strong>​：Spring框架中有哪些核心概念？请举例说明您如何使用它们。</li><li>​<strong>数据库问题</strong>​：在银行系统中，数据一致性和完整性至关重要。请谈谈您如何保证数据库操作的原子性、一致性、隔离性和持久性（ACID）。</li><li>​<strong>设计模式问题</strong>​：请描述一种您在后端开发中使用过的软件设计模式，并解释为什么选择它。</li><li>​<strong>系统架构问题</strong>​：银行系统通常需要高可用性和可扩展性。请谈谈您如何设计一个高可用的后端系统。</li><li>​<strong>安全问题</strong>​：银行系统对安全性有很高的要求。请谈谈您在开发过程中如何考虑和实现安全性。</li><li>​<strong>沟通与合作问题</strong>​：在团队项目中，您如何处理意见不合或冲突？</li></ol><p>​<strong>反问环节</strong>​：您有什么想问我的吗？</p><p>现在，让我们开始模拟面试。我们将从第一个问题开始：</p><blockquote><p>接下来是机器人提出问题我来回答，以问题为主键，下面有我的回答和机器人对我的评价。</p></blockquote><h1 id="请谈谈Java中的集合框架，以及您在项目中如何使用它们。"><a href="#请谈谈Java中的集合框架，以及您在项目中如何使用它们。" class="headerlink" title="请谈谈Java中的集合框架，以及您在项目中如何使用它们。"></a>请谈谈Java中的集合框架，以及您在项目中如何使用它们。</h1><h2 id="我的回答："><a href="#我的回答：" class="headerlink" title="我的回答："></a>我的回答：</h2><p>java中的集合框架有<code>set，map，list，queue</code>，在实际开发中我们要用的数据类型不确定，java集合提供了更灵活和有效的方法来处理多个数据对象，同时java集合内置了很多方法，提高了处理数据的灵活性。在实际项目中我使用更多的为<code>hashmap</code>，这是基于hash的一种键值对集合，通过键来生成hash值，再通过hash值索引到对应的对象的值，但是<code>hashmap</code>是线程不安全的，在增加hash数组的长度时候容易陷入循环，在多线程并发环境下我往往使用<code>concurrenthashmap</code></p><h2 id="评价："><a href="#评价：" class="headerlink" title="评价："></a>评价：</h2><p>您对Java集合框架的描述是准确的，并且您提供了实际使用场景中的例子，特别是提到了<code>HashMap</code>和<code>ConcurrentHashMap</code>的区别，这显示了您对线程安全和并发环境下的数据结构选择有深入的理解。</p><p>​<strong>回答评估</strong>​：</p><ul><li>​<strong>优点</strong>​：您正确地识别了Java集合框架中的主要类型，并提供了<code>HashMap</code>的使用场景和在多线程环境下的替代方案。</li><li>​<strong>改进点</strong>​：可以进一步说明<code>HashMap</code>和<code>ConcurrentHashMap</code>在性能上的差异，以及在什么情况下选择使用它们。</li></ul><blockquote><p>这个问题回答的较为满意比较熟悉</p></blockquote><h1 id="描述一下Java中的线程同步机制，以及您是如何处理并发问题的。"><a href="#描述一下Java中的线程同步机制，以及您是如何处理并发问题的。" class="headerlink" title="描述一下Java中的线程同步机制，以及您是如何处理并发问题的。"></a>描述一下Java中的线程同步机制，以及您是如何处理并发问题的。</h1><h2 id="我的回答：-1"><a href="#我的回答：-1" class="headerlink" title="我的回答："></a>我的回答：</h2><p>java中的线程同步机制有多种方法，最常用的就是用时间片，假如我们要使ab两个线程同步，a线程的时间片用完后我们就将a线程挂起，再执行b线程，当b的时间片用完后再将b挂起，执行a线程。我们在处理并发问题的时候最容易遇到的就是死锁问题，我们可以采取加锁的方法，当a执行完之后释放资源，b才能执行。</p><h2 id="评价：-1"><a href="#评价：-1" class="headerlink" title="评价："></a>评价：</h2><p>​<strong>回答评估</strong>​：</p><ul><li>​<strong>优点</strong>​：您提到了线程同步和死锁的概念，这是处理并发问题时需要考虑的重要方面。</li><li>​<strong>改进点</strong>​：可以更具体地描述Java中的线程同步机制，例如使用<code>synchronized</code>关键字、显式锁（如<code>ReentrantLock</code>）、以及Java并发API中的其他同步工具和方法。此外，时间片的概念在操作系统层面更为常见，而在Java中，线程调度是由JVM和操作系统共同管理的。</li></ul><blockquote><p>java同步机制自己没有用过，只是了解相关知识，自己是按照操作系统层面来解释cpu单核中的同步机制，所以答案不是很准确。Java中的线程同步机制通常使用<code>synchronized</code>关键字。为了防止出现多个线程访问共享资源，导致脏数据影响系统的运行，处理并发问题必须将需要同步的线程加锁，而锁通常分为悲观锁乐观锁。在实际开发中我一般使用redis来实现分布式锁的解决方案。另外的要增加系统的并发量，我们可以增加cpu核数，在分布式系统中可以增加节点数。</p></blockquote><hr><p>下班下班，明天继续。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机专业考研统考408经验</title>
      <link href="/2022/04/11/kaoyan/"/>
      <url>/2022/04/11/kaoyan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我的成绩"><a href="#我的成绩" class="headerlink" title="我的成绩"></a>我的成绩</h2><p>本科山西大学，一志愿北京工业大学，总分362，政治71，英语二74，数学二107，408计算机综合110，初试排名39（一共招92人）。并不是一些学霸的高分经验贴，我自己起初的学习水平一般，到后面一点点进步。相信代表了大多数同学的情况，希望你能耐心看完一定会有所收获。</p><blockquote><p>准备阶段：建议和几个同学一起买一年的百度网盘会员，便于下载收藏各科的网课和资料。有条件可以买名师的正版课程，没有条件也可以在公主号找相应的资源。</p></blockquote><h2 id="第一阶段寒假之前（9-12月份）"><a href="#第一阶段寒假之前（9-12月份）" class="headerlink" title="第一阶段寒假之前（9-12月份）"></a>第一阶段寒假之前（9-12月份）</h2><ul><li>英语：大量多次复习英语单词，如果英语基础比较薄弱可以加上长难句，在这个阶段英语基本功慢慢变好，可以尽早通过四六级考试。</li><li>数学：如果数学基础也比较薄弱，可以买基础张宇30讲（或者任意自己喜欢的老师的基础书）外加相应老师的视频课程。初步构建数学知识体系和结构。</li></ul><blockquote><p>学习的节奏最好每周学习几天，最天学一上午或者一下午(大约3-4小时就够了)。切记不要学习的太过用力，大部分人的大一大二是比较放纵的状态，学习的状态需要的是慢慢适应。</p></blockquote><h2 id="第二阶段寒假之后（3-7月份）"><a href="#第二阶段寒假之后（3-7月份）" class="headerlink" title="第二阶段寒假之后（3-7月份）"></a>第二阶段寒假之后（3-7月份）</h2><ul><li>英语：继续复习英语单词，最少这个时候准备开始长难句，买一本练习册练一遍之后就会发现进步，同时继续冲击四六级考试。</li><li>数学：可以买一本基础题练习册进行训练（推荐<strong>汤家凤1800</strong>），并且继续巩固基础，如果觉得基础不牢不要买进一步练习册（例如李永乐660，李林880）。这个阶段不需要写难的题。</li><li>专业课：初步阶段，直接看王道的四本辅导书，课后题写选择题就好了，同样的不要纠结于大题。一定要看b站上免费的王道课程讲的非常好，不管是不是统考的都建议看。</li></ul><blockquote><p>学习节奏是建议除周六日每天都学习6-8小时，已经可以完成以上任务了，同样的不要太用力。主要是养成学习习惯，并且构建英语，数学，专业课的体系。</p></blockquote><h2 id="第三个阶段暑假（7-8月份）"><a href="#第三个阶段暑假（7-8月份）" class="headerlink" title="第三个阶段暑假（7-8月份）"></a>第三个阶段暑假（7-8月份）</h2><ul><li>英语：继续背单词，并且开始写历年真题（推荐从划分英一英二的那年开始从前往后刷），如果错误率过高，推荐看唐迟的阅读的逻辑网课。按照老师的方法来，慢慢提高正确率。</li><li>数学：1800没刷完的继续刷（应该大部分人都没刷完），刷完的刷李林880，这个阶段非常建议看武忠祥的强化课，线代看李永乐强化课。看完课再结合写的题总结总结，你对数学这一科的理解和基础已经非常扎实了。</li><li>专业课：和上一阶段的任务一样，如果学的已经基础比较好进度快的话，可以写王道辅导书课后题的大题，结合自己学习的知识反复加深理解，千万不要陷入某些误区，遇到不懂的上网查，或者反复看视频直到自己理解为止。</li><li>政治：看肖秀荣的知识点的书并开始一刷<strong>肖秀荣1000题</strong>，对错误率高的或者实在理解不了的知识点，看相应的网课例如徐涛或者腿姐。</li></ul><blockquote><p>学习节奏最容易被打乱的时期，能留在学习就在学校，在家学习最好找个自习室。这样学习效率才会高，建议周可以学习五六天，每天八小时，适当休息。</p></blockquote><h2 id="第四个阶段暑假后（9-12月份）"><a href="#第四个阶段暑假后（9-12月份）" class="headerlink" title="第四个阶段暑假后（9-12月份）"></a>第四个阶段暑假后（9-12月份）</h2><ul><li>英语：按照节奏刷真题，背单词，二刷真题，一定要背大作文模板（大大节省考试时间），真题可以留两三套，考试前两周模拟。</li><li>数学：继续刷李林880，或者李永乐660，比较进阶的题目。同时开始刷真题，并且一定要总结打百分卷。这个阶段推荐<strong>武忠祥的十七堂课</strong>，同时大量的模拟卷子也要留出时间做。真题留近两年模拟。</li><li>专业课：复习408的话要一定要开始写近真题了，近15年的真题从前往后写，9月份就开始，写完更正错题，并且不熟悉的知识点反复记忆理解。考前一个月再把写过的真题拿出来，二刷，这时尽量保持每张卷子都有130分以上。同样留近两三年的真题考前模拟。</li><li>政治：一定一定要买腿姐小册子，并全部背诵。同时二刷肖秀荣1000题的错题，考前一段时间时政出来后，一定要跟着一个老师看一些时政相关的网课，并且打印资料记忆，有时间多做一些模拟卷子的选择题（肖四肖八腿四）等。尽量慢慢的提高选择题正确率，从30+到40+。大题的话等到最后一个月开始背押题，陆续各个老师的押题预测开始，任意一个老师都可以，压不压中题是运气问题，但是背的多就有话可说。</li></ul><blockquote><p>学习的节奏最好保持每天8-10小时。</p></blockquote><h2 id="第五阶段考研前一周"><a href="#第五阶段考研前一周" class="headerlink" title="第五阶段考研前一周"></a>第五阶段考研前一周</h2><p>英语看看错题，写一两张真题练手，数学看看错题，写一两张真题练手，政治继续背大题，背到考研前一天。专业课，看看错题，练练基本的算法，写一两张卷子。（以上卷子都写在标准答题卡上，找找感觉），政治大题写在答题卡默写非常有可能出的题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前期打基础，中期查漏补缺，后期写真题多刷题，培养应试技巧。心态和实力同等重要。</p><hr><p>若有疑问或者其他咨询可以留言或者加QQ：1026597811</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 校园 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
